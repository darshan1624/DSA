DSA Notes
============================================================================
Datastructures: They are are different ways of organising the data on your 
computer, that can be used effectively.
All applications deal with data. Before processing the data we have to 
organise the data in a certain way, that makes the process efficient.
Performance and efficiency of application depends on how the data is
structured, organised and grouped together. 

Algorithm: 
Set of rules for a computer to perform a task.

Types of Datastructures:
- Premitive 
	They are basic datatypes, cannot be broken in to smaller dtypes.
	Integer, Float, String, Boolean
- NonPremitive
	They are complex datastructures, can be broken into samller dtypes.
   - linear (list, tuple, array, linkedlist, stack, queue)
	Elements are arranged in sequential order.
   - non linear (set, dictionary, Tree, Graph)
	Elements are ordered in hierarical order to represent certain 
		relationship.

Types of Algorithms:
- Sorting (bubble sort, insertion sort)
- search (linear, binary search )
- Graph (depth, breadth, dijktras algorithm)
- Dynamic programming algorithms
- Divide and Conquer Algorithms
- Recursive


What is BigO ?
The metric used to measure the efficiency of the code is called BigO.
It is calculated by identifying the number of operations performed.

Notations: 
 bestcase Omega Ω
 averagecase thetha θ
 worstcase bigO O

Run time complxities: 
O(1): constant time compelxity
O(n): Linear time complexity (As the input grows, number of operations also
	grow.)
O(n^2): Quadratic time complexity
O(logn): logarithmic complexity.  it is very edficient than O(n^2) and O(n)

Space complexity:
It measure how the memory space consumed as he input size grows.


Array
- Array can store data of same datatype 
- Elements in an array are positioned in contagious manner.
- Each element in an array has a unique index.

Types of Array
1d array
 Has only one row and multiple columns.
 Each element has one index.
2d array
 Has multiple rows and columns.
 Each element has double index.
3d array
 Each element has triple index.

How to create array in python.
- array module 
	import array
	my_array = array.array('i')
	my_array = array.array('i', [1,2,3,4])
- numpy module 
	import numpy as np
	np_array[ = np.array([], dtype=int)
	np_array = np.array([1,2,3,4])


- Insertion in array
my_array = array.array('i', [1,2,3,4])
my_array.insert(1,6)
	==> [1,6,2,3,4]
Time complxity = O(n) // requires to shift all elements
space complexity = O(1) // requires only one memory block for new element

- Traversal/linear search in array
	for i in array:
		print(i)
Time complxity = O(n) 
space complexity = O(1)  

- Deletion in array
my_array.remove(1)
	==> [6,2,3,4]
Time complxity = O(n) // requires to shift all elements
space complexity = O(1) 



How to create 2D array?
import numpy as np 
twoDarray = np.array([[11,12,13,14], [15,16,17,18], [19,20,21,22]])
==> [[11,12,13,14]
      [15,16,17,18]
      [19,20,21,22]]

Insertion in 2D array
twoDarray = np.array([[11,12,13,14], [15,16,17,18], [19,20,21,22]])
twoDarray = np.insert(twoDarray, 0, [[1,2,3]], axis=1)
==> [[1, 11,12,13,14]
      [2, 15,16,17,18]
      [3, 19,20,21,22]]
				axis = 1 means column 
twoDarray = np.insert(twoDarray, 0, [[1,2,3,4]], axis=0)
==> [ [1,2,3,4]
      [11,12,13,14]
      [15,16,17,18]
      [19,20,21,22]]		
				axis = 0 means row 
// np.append() works same but append at last column/row.


Time complxity = O(n^2)
space complexity = O(n^2)

Traverisng/searching in 2D array
for i in range(len(twoDarray)):
	for j in range(len(twoDarray)):
		print(twoDarray[i][j])

no. of rows = len(twoDarray)
no. of cols = len(twoDarry[0])

Time complxity = O(n^2)
space complexity = O(1)

Deletion in 2D array
new2Darray = np.delete(twoDarray,0,axis=0)

Time complxity = O(n^2)
space complexity = O(1)



When to use array?
-To store multiple variables of same datatype.
-Random access with index is fast that any other datastaructure like
linkedlist.

Drawback
reserves certain memory when creating array.



List: 
A list is a datastructrure that holds oredered collection of items. 

List vs Array
similarity
Both datastructures are mutable.
Both are indexed 

Difference
Arrays are more optimised for arthimetic operations.
Lists elements can be different.


Operations on list
indexing 
nested list 
unpacking of list 
slicing 
lists are mutable 
.append()
.extend([])
seq1 + seq2
.insert()
del[seq[2]]
del[seq]
.clear()
.index()
.count()
.sort()
.reverse()
